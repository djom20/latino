#DEFINICIÓN (latino)

Este documento pretende explicar de manera general la definición del nuevo
lenguaje de programación "Latino"

Comentarios:
---
Los comentarios empezaran por el signo de numero (#), sólo será considerado
como comentario si la línea empieza con dicho cáracter,o es precedido con espacios o tabuladores.
no existe comentarios multilinea.

#Este es un comentario de una linea
    #Este es un comentario con espacios al inicio de la linea
        #Este es un comentario tabulado

Variables:
---
Las variables son identificadores asociados a valores.

identificador = valor
numero = 1

Un identificador puede:
* empezar por guión bajo (_) o letras
* contener caracteres en mayúsculas y minúsculas (sensible a mayúsculas y minúsculas)
Un identificador NO puede:
* empezar por un número.
* empezar por un símbolo, ni tampoco que sea una palabra reservada.

Tabla tipo de dato
-------------------------------------------------------------
latino                  |   lenguajes como C / C++ / Java / C# / etc.
-------------------------------------------------------------
logico                  |   bool
entero                  |   int
decimal                 |   float / double / decimal
cadena / literal        |   string / String
-------------------------------------------------------------

Constantes:
---
Cuando se declara una constante, también se debe asignar el valor forzosamente.
Las costantes se deben de declarar en mayúsculas

PI = 3.1416

Operadores:
---
A continuacion se listan los operadores:

------------------------------------------------------------
Categoría               Operadores
------------------------------------------------------------
Aritmético             |   + - * / % (Modulo)
Lógico                 |   && ||
Concatenación          |   .
Incremento, decremento |   ++ --
Relacional             |   == != < > <= >=
Asignación             |   =
------------------------------------------------------------

Estructuras de control:
---
si (if): Evalua una condicion y si el resultado es [verdadero] ejecuta
las instrucciones a continuacion.

si (condicion)
   #codigo
fin

En caso de que el resultado de la condición sea [falso] se deberá de ejecutar
el código despues de la palabra reservada [sino]

si (condicion)
   #codigo
sino
   #codigo
fin

Es posible el anidamiento de las sentencias [si] de la siguiente manera:
si (condicion)
   #codigo
sino si (condicion)
        #codigo
     sino
        #codigo
     fin
fin

mientras (while): Hace que una instrucción o bloque de instrucciones se repitan
mientras la condicion sea [verdadero]

mientras (condicion)
    #codigo
fin

mientras (verdadero)
    #codigo
fin

hacer-cuando (do-while): Hace que una instrucción o bloque de instrucciones
se repitan mientra la condicion sea [verdadero],
las intrucciones de codigo se ejecutan al menos una vez.

hacer
    #codigo
cuando (condicion)

Metodos / Funciones
---
un método consiste generalmente de una serie de sentencias para llevar a cabo una acción,
un juego de parámetros de entrada que regularán dicha acción o, las funciones se definen con
la palabra reservada[funcion].
Se puede regresar el valor con la palabra clave [retorno]
La estructura de un método es la siguiente:

funcion nombre_funcion (arg1, arg2)
    resultado = 0
    #codigo
    retorno resultado
fin

Palabras reservadas hasta el momento:
---
si
verdadero
cierto
falso
fin
sino
mientras
hacer
cuando
funcion
retorno
incluir
